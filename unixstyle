<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>m4nitous - Boot Sequence</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono:wght@400&display=swap');
        
        @font-face {
            font-family: 'ambisi';
            src: url('/ambisi.otf') format('opentype'),
                 url('./ambisi.otf') format('opentype'),
                 url('../ambisi.otf') format('opentype');
            font-weight: normal;
            font-style: normal;
            font-display: swap;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: #000;
            color: #00ff00;
            font-family: 'Share Tech Mono', monospace;
            font-size: clamp(12px, 2.5vw, 18px);
            line-height: 1.4;
            overflow: hidden;
            cursor: none;
            margin: 0;
            padding: 0;
        }
        
        .terminal {
            padding: 20px;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            position: relative;
        }
        
        .line {
            margin-bottom: 12px;
            opacity: 0;
            min-height: 1.4em;
            position: absolute;
            width: 100%;
            text-align: center;
            transition: opacity 0.5s ease-in-out;
        }
        
        .line.show {
            opacity: 1;
        }
        
        .line.hide {
            opacity: 0;
        }
        
        .final-logo {
            font-family: 'ambisi', 'Share Tech Mono', monospace;
            font-size: clamp(24px, 5vw, 48px);
            font-weight: normal;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
        
        .final-logo.show {
            opacity: 1;
        }
        
        .cursor {
            background: #00ff00;
            animation: blink 1s infinite;
            width: 10px;
            height: 1.2em;
            display: inline-block;
            margin-left: 2px;
            vertical-align: middle;
        }
        
        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        .loading-dots::after {
            content: '';
            animation: dots 1.5s infinite;
        }
        
        @keyframes dots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }
        
        .current-line {
            position: relative;
            min-height: 1.4em;
            width: 100%;
        }
        
        @media (max-width: 768px) {
            .terminal {
                padding: 15px;
            }
        }
        
        @media (max-width: 480px) {
            .terminal {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="terminal">
        <div class="current-line" id="output"></div>
    </div>

    <script>
        // Audio context for typing sounds
        let audioContext;
        let isAudioInitialized = false;

        function initAudio() {
            if (!isAudioInitialized) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                isAudioInitialized = true;
            }
        }

        function playTypingSound() {
            if (!isAudioInitialized) return;
            
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800 + Math.random() * 400, audioContext.currentTime);
            oscillator.type = 'square';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        const bootSequence = [
            { text: "m4nitous", delay: 800 },
            { text: "", delay: 400 },
            { text: "extracting user credentials", loading: true, delay: 1200 },
            { text: "", delay: 300 },
            { text: "", delay: 500, showIP: true }, // This will show the IP
            { text: "", delay: 400 },
            { text: "connecting with the server", loading: true, delay: 1500 },
            { text: "", delay: 300 },
            { text: "server unreachable trying to connect with OTA", delay: 1200 },
            { text: "", delay: 400 },
            { text: "securing your connection", loading: true, delay: 2000 },
            { text: "", delay: 300 },
            { text: "connection established", delay: 1000 },
            { text: "", delay: 600 },
            { text: "dont be traiter", delay: 1500 }
        ];

        let currentLine = 0;
        let userIP = 'detecting...';
        const output = document.getElementById('output');

        // Fetch user IP address
        async function getUserIP() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                userIP = data.ip;
            } catch (error) {
                // Fallback to a different service
                try {
                    const response = await fetch('https://ipapi.co/json/');
                    const data = await response.json();
                    userIP = data.ip;
                } catch (fallbackError) {
                    // If both fail, use a mock IP for demonstration
                    userIP = '192.168.1.' + Math.floor(Math.random() * 254 + 1);
                }
            }
        }

        // Initialize IP detection
        getUserIP();

        // Initialize audio on first user interaction
        document.addEventListener('click', initAudio);
        document.addEventListener('keydown', initAudio);

        function typeText(text, element, callback) {
            let i = 0;
            const typingInterval = setInterval(() => {
                if (i < text.length) {
                    element.textContent += text[i];
                    playTypingSound();
                    i++;
                } else {
                    clearInterval(typingInterval);
                    if (callback) callback();
                }
            }, 30 + Math.random() * 40);
        }

        function addLine(lineData) {
            // Clear previous line
            output.innerHTML = '';
            
            const line = document.createElement('div');
            line.className = 'line';
            
            if (lineData.loading) {
                line.classList.add('loading-dots');
            }
            
            output.appendChild(line);
            
            // Show the line
            setTimeout(() => {
                line.classList.add('show');
                
                if (lineData.showIP) {
                    // Show IP address extraction
                    typeText(`IP: ${userIP} - EXTRACTED`, line, () => {
                        setTimeout(() => {
                            line.classList.add('hide');
                            setTimeout(() => {
                                processNextLine();
                            }, 500);
                        }, lineData.delay);
                    });
                } else if (lineData.text) {
                    typeText(lineData.text, line, () => {
                        // Wait for specified delay, then fade out and proceed
                        setTimeout(() => {
                            line.classList.add('hide');
                            setTimeout(() => {
                                processNextLine();
                            }, 500); // Wait for 0.5s fade out animation
                        }, lineData.delay);
                    });
                } else {
                    // For empty lines, just wait and proceed
                    setTimeout(() => {
                        line.classList.add('hide');
                        setTimeout(() => {
                            processNextLine();
                        }, 500); // Wait for 0.5s fade out
                    }, lineData.delay);
                }
            }, 100);
        }

        function processNextLine() {
            if (currentLine < bootSequence.length) {
                addLine(bootSequence[currentLine]);
                currentLine++;
            } else {
                // Clear and add final m4nitous logo with custom font
                output.innerHTML = '';
                const finalLogo = document.createElement('div');
                finalLogo.className = 'final-logo';
                finalLogo.textContent = 'm4nitous';
                output.appendChild(finalLogo);
                
                // Show the final logo
                setTimeout(() => {
                    finalLogo.classList.add('show');
                    
                    // Redirect to home.php after 2 seconds
                    setTimeout(() => {
                        window.location.href = 'home.php';
                    }, 2000);
                }, 100);
            }
        }

        // Start the boot sequence
        setTimeout(() => {
            processNextLine();
        }, 500);
    </script>
</body>
</html>
